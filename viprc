# 24jan25 Lindsay John Lawrence

(setq *EncKeys '(("yek" . "key")))

(local) (prinCmd)

(de prinCmd @
   (use L
      (setq L (make (while (args) (link (next))) ) )
      (prCmd (make (link (chop (pack L))))
   )) )

(cmd "yek" (L Lst Cnt) # Set named encryption key
   (let (P1 NIL P2 NIL
         GetPwd '(() (pack (make
                  (use C
                     (until (sub? (setq C (getch)) "\r\n")
                        (link C)) ) ) ) )
         )
      (when L
         (prinCmd "Setting encryption key for [" L "]")
         (prinCmd "Enter Password:")
         (setq P1 (GetPwd))
         (prinCmd "Confirm Password:")
         (setq P2 (GetPwd))
         (ifn (or (sp? P1) (= P1 P2))
            (prinCmd "Encryption key NOT set; Password mismatch or empty")
            (if (assoc L *EncKeys)
               (con @ P1)
               (push '*EncKeys (cons L P1))
               )
            (prinCmd (chop "Encryption key set")))
            ) ) )

(cmd "enc" (L Lst Cnt) # Encrypt buffer using named key
   (when (sys "YEK" (cdr (assoc L *EncKeys)) )
      (prinCmd "Using encryption key for [" L "]")
      (pipe
         (out '("openssl" "enc" "-aes-256-cbc" "-salt" "-pbkdf2" "-a" "-pass" "env:YEK")
            (mapc prinl (: buffer text)) )
         (let (EncryptedData (rdLines))
            (setq *Change NIL)
            (move 'goAbs 1 (or (format *Count) 1)) # Move to top
            (setq *Change "d") # Delete...
            (move 'goAbs 1 (or (format *Count) T)) # Delete all
            (setq *Change "P") # Paste
            (paste (cons T EncryptedData) *@@) # Replace with encoded data
            ) ) ) )

(cmd "dec" (L Lst Cnt) # Decrypt buffer using named key
   (when (sys "YEK" (cdr (assoc L *EncKeys)) )
      (prinCmd "Using encryption key for [" L "]")
      (pipe
         (out '("openssl" "enc" "-aes-256-cbc" "-d" "-pbkdf2" "-a" "-pass" "env:YEK")
            (mapc prinl (: buffer text)) )
         (let (EncryptedData (rdLines))
            (setq *Change NIL)
            (move 'goAbs 1 (or (format *Count) 1)) # Move to top
            (setq *Change "d") # Delete...
            (move 'goAbs 1 (or (format *Count) T)) # Delete all
            (setq *Change "P") # Paste
            (paste (cons T EncryptedData)) # Replace with encoded data
            ) ) ) )

(cmd "zxz" (L Lst Cnt)
   (let (RndN '((N) (setq N (or N 4))
      (in "/dev/urandom"
         (pack (make (do N (link (hex (rd 1))))) )
      ) ) )
      (pipe
         (out '("curl" "-i" "-Ffile=@-" "https://0x0.st")
#      (out '("cat" "-")
            (mapc prinl (: buffer text)) )
         (scratch (tmp (pack "zxz-" (RndN)))
            (rdLines))
         ) ) )


(map+ "^h" (nextBuf T) )   # [PGUP] Page up
(map+ "^l" (nextBuf) )     # [PGDOWN] Page down

(map+q "1" ":1\r")
(map+q "2" ":2\r")
(map+q "3" ":3\r")
(map+q "4" ":4\r")
(map+q "5" ":5\r")
(map+q "6" ":6\r")
(map+q "7" ":7\r")
(map+q "l" ":ls\r")
